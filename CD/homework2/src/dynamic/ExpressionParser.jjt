options
{
	LOOKAHEAD = 1;
	FORCE_LA_CHECK = true;
	CHOICE_AMBIGUITY_CHECK = 2;
	OTHER_AMBIGUITY_CHECK = 1;
	DEBUG_PARSER = true;
	
	TRACK_TOKENS = true;

	MULTI = true;
	VISITOR = true;
	NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(ExpressionParser)
package dynamic;

import java.io.*;
import expression.*;

public class ExpressionParser
{	
	public static void main(String args[]) 
	{
	    try 
	    {
	      	ExpressionParser p = new ExpressionParser(new FileInputStream(new File("./samples/ex1.txt")));
	    	ASTStart root = p.Start();
	    	PolishPrefixVisitor ppVisitor=new PolishPrefixVisitor();
	    	root.jjtAccept(ppVisitor,null);
	    	NormalVisitor normalVisitor=new NormalVisitor();
	    	root.jjtAccept(normalVisitor,null);
	    	EvaluateVisitor evalVisitor=new EvaluateVisitor();
	    	root.jjtAccept(evalVisitor,null);
//	    	root.dump(">");
			System.out.println("Thank you.");
	    } 
	    catch (Exception e) 
	    {									      
			System.err.println("Oops.");
			System.err.println(e.getMessage());
			e.printStackTrace();
	    }
	}
}
PARSER_END(ExpressionParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN : /* IDENTIFIERS */
{
  < IntegerConstant: ["1"-"9"](<DIGIT>)* >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN : /* OPERATORS */
{
  < PLUS: "+" > |
  < MUL: "*" >
}

ASTStart Start() #Start:
{}
{
  Expression()
  {
  		return jjtThis; 
  	}} 


void Expression() #Expression:
{
}
{
	Term() ["+" Expression() ] 
}


void Term() #Term:
{
}
{
	Factor() ["*" Term()]
}

void Factor() #Factor:
{
}
{
  	Paranthesis()
 | < IntegerConstant > 
}

void Paranthesis() #Paranthesis:
{
}
{
  "(" Expression() ")" 
}