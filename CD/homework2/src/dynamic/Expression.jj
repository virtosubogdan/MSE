/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Expression.jj */
/*@egen*/options
{
	LOOKAHEAD = 1;
	FORCE_LA_CHECK = true;
	CHOICE_AMBIGUITY_CHECK = 2;
	OTHER_AMBIGUITY_CHECK = 1;
	DEBUG_PARSER = true;
	
	                    

	             
	               
	                         
}

PARSER_BEGIN(Start)
package dynamic;

import java.io.*;
import expression.PolishPrefixVisitor;

public class Start/*@bgen(jjtree)*/implements StartTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTStartState jjtree = new JJTStartState();

/*@egen*/	
	public static void main(String args[]) 
	{
	    try 
	    {
	      	Start p = new Start(new FileInputStream(new File("./samples/ex1.txt")));
	    	ASTStart root = p.Start();
	    	PolishPrefixVisitor ppVisitor=new PolishPrefixVisitor();
	    	root.jjtAccept(ppVisitor,null);
//	    	root.dump(">");
			System.out.println("Thank you.");
	    } 
	    catch (Exception e) 
	    {									      
			System.err.println("Oops.");
			System.err.println(e.getMessage());
			e.printStackTrace();
	    }
	}
}
PARSER_END(Start)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}


TOKEN : /* IDENTIFIERS */
{
  < IntegerConstant: ["1"-"9"](<DIGIT>)* >
|
  < #DIGIT: ["0"-"9"] >
}

TOKEN : /* OPERATORS */
{
  < PLUS: "+" > |
  < MUL: "*" >
}

ASTExpression Start()       :
{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
  		return jjtn000; 
  	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/} 


ASTExpression Expression() :
{
}
{
	Term() ["+"/*@bgen(jjtree) Add */
                    {
                      ASTAdd jjtn001 = new ASTAdd(JJTADD);
                      boolean jjtc001 = true;
                      jjtree.openNodeScope(jjtn001);
                      jjtn001.jjtSetFirstToken(getToken(1));
                    }
                    try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                    } catch (Throwable jjte001) {
                      if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                      } else {
                        jjtree.popNode();
                      }
                      if (jjte001 instanceof RuntimeException) {
                        throw (RuntimeException)jjte001;
                      }
                      if (jjte001 instanceof ParseException) {
                        throw (ParseException)jjte001;
                      }
                      throw (Error)jjte001;
                    } finally {
                      if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                        jjtn001.jjtSetLastToken(getToken(0));
                      }
                    }
/*@egen*/      ] 
}


void Term()      :
{/*@bgen(jjtree) Term */
  ASTTerm jjtn000 = new ASTTerm(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Term */
        try {
/*@egen*/
	Factor() ["*" Factor() ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}

void Factor()        :
{/*@bgen(jjtree) Factor */
  ASTFactor jjtn000 = new ASTFactor(JJTFACTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) Factor */
        try {
/*@egen*/
  	"(" Expression() ")" 
 |/*@bgen(jjtree) Param */
   {
     ASTParam jjtn001 = new ASTParam(JJTPARAM);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
     jjtn001.jjtSetFirstToken(getToken(1));
   }
   try {
/*@egen*/ < IntegerConstant >/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
       jjtn001.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/       /*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/
}